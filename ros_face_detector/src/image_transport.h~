#ifndef IMAGE_TRANSPORT_IMAGE_TRANSPORT_H
#define IMAGE_TRANSPORT_IMAGE_TRANSPORT_H
 
#include "image_transport/publisher.h"
#include "image_transport/subscriber.h"
#include "image_transport/camera_publisher.h"
#include "image_transport/camera_subscriber.h"

namespace image_transport {

class ImageTransport
{
public:
explicit ImageTransport(const ros::NodeHandle& nh);

~ImageTransport();

Publisher advertise(const std::string& base_topic, uint32_t queue_size, bool latch = false);

Publisher advertise(const std::string& base_topic, uint32_t queue_size,
	const SubscriberStatusCallback& connect_cb,
	const SubscriberStatusCallback& disconnect_cb = SubscriberStatusCallback(),
	const ros::VoidPtr& tracked_object = ros::VoidPtr(), bool latch = false);

Subscriber subscribe(const std::string& base_topic, uint32_t queue_size,
	const boost::function<void(const sensor_msgs::ImageConstPtr&)>& callback,
	const ros::VoidPtr& tracked_object = ros::VoidPtr(),
	const TransportHints& transport_hints = TransportHints());
 
Subscriber subscribe(const std::string& base_topic, uint32_t queue_size,
	void(*fp)(const sensor_msgs::ImageConstPtr&),
	const TransportHints& transport_hints = TransportHints())
	{
	return subscribe(base_topic, queue_size,
	boost::function<void(const sensor_msgs::ImageConstPtr&)>(fp),
	ros::VoidPtr(), transport_hints);
	}
	
template<class T>
Subscriber subscribe(const std::string& base_topic, uint32_t queue_size,
	void(T::*fp)(const sensor_msgs::ImageConstPtr&), T* obj,
	const TransportHints& transport_hints = TransportHints())
	{
	return subscribe(base_topic, queue_size, boost::bind(fp, obj, _1), ros::VoidPtr(), transport_hints);
	}

template<class T>
Subscriber subscribe(const std::string& base_topic, uint32_t queue_size,
	void(T::*fp)(const sensor_msgs::ImageConstPtr&),
	const boost::shared_ptr<T>& obj,
	const TransportHints& transport_hints = TransportHints())
	{
	return subscribe(base_topic, queue_size, boost::bind(fp, obj.get(), _1), obj, transport_hints);
	}

CameraPublisher advertiseCamera(const std::string& base_topic, uint32_t queue_size, bool latch = false);

CameraPublisher advertiseCamera(const std::string& base_topic, uint32_t queue_size,
		const SubscriberStatusCallback& image_connect_cb,
		const SubscriberStatusCallback& image_disconnect_cb = SubscriberStatusCallback(),
		const ros::SubscriberStatusCallback& info_connect_cb = ros::SubscriberStatusCallback(),
		const ros::SubscriberStatusCallback& info_disconnect_cb = ros::SubscriberStatusCallback(),
		const ros::VoidPtr& tracked_object = ros::VoidPtr(), bool latch = false);

CameraSubscriber subscribeCamera(const std::string& base_topic, uint32_t queue_size,
		const CameraSubscriber::Callback& callback,
		const ros::VoidPtr& tracked_object = ros::VoidPtr(),
		const TransportHints& transport_hints = TransportHints());

CameraSubscriber subscribeCamera(const std::string& base_topic, uint32_t queue_size,
00112                                    void(*fp)(const sensor_msgs::ImageConstPtr&,
00113                                              const sensor_msgs::CameraInfoConstPtr&),
00114                                    const TransportHints& transport_hints = TransportHints())
00115   {
00116     return subscribeCamera(base_topic, queue_size, CameraSubscriber::Callback(fp), ros::VoidPtr(),
00117                            transport_hints);
00118   }
00119 
00124   template<class T>
00125   CameraSubscriber subscribeCamera(const std::string& base_topic, uint32_t queue_size,
00126                                    void(T::*fp)(const sensor_msgs::ImageConstPtr&,
00127                                                 const sensor_msgs::CameraInfoConstPtr&), T* obj,
00128                                    const TransportHints& transport_hints = TransportHints())
00129   {
00130     return subscribeCamera(base_topic, queue_size, boost::bind(fp, obj, _1, _2), ros::VoidPtr(),
00131                            transport_hints);
00132   }
00133 
00138   template<class T>
00139   CameraSubscriber subscribeCamera(const std::string& base_topic, uint32_t queue_size,
00140                                    void(T::*fp)(const sensor_msgs::ImageConstPtr&,
00141                                                 const sensor_msgs::CameraInfoConstPtr&),
00142                                    const boost::shared_ptr<T>& obj,
00143                                    const TransportHints& transport_hints = TransportHints())
00144   {
00145     return subscribeCamera(base_topic, queue_size, boost::bind(fp, obj.get(), _1, _2), obj,
00146                            transport_hints);
00147   }
00148 
00153   std::vector<std::string> getDeclaredTransports() const;
00154 
00155 private:
00156   struct Impl;
00157   typedef boost::shared_ptr<Impl> ImplPtr;
00158   typedef boost::weak_ptr<Impl> ImplWPtr;
00159 
00160   ImplPtr impl_;
00161 };
00162 
00163 } //namespace image_transport
00164 
00165 #endif
